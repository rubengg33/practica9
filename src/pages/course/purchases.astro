---
import Layout from "../../layouts/Layout.astro";
import { getCourses } from "../../lib/courses";
import PurchasedCourseActions from "../../components/PurchasedCourseActions";
import Like from "../../components/Like";

// Obtener todos los cursos
const allCourses = await getCourses();

// La lógica de filtrado se hará en el cliente mediante PurchasedCourseActions
---

<Layout title="Mis Cursos Comprados">
  <div class="container mx-auto my-12 px-4 sm:px-6 lg:px-12">
    <h1 class="text-3xl font-bold text-center mb-8">Mis Cursos Comprados</h1>
    <div class="flex flex-wrap -mx-2" id="coursesContainer">
      {allCourses.map((item: any) => (
        <div class="w-full sm:w-1/2 lg:w-1/3 p-2 course-card opacity-0 transition-opacity duration-300" data-course-id={item.id}>
          <article class="h-full bg-white rounded-lg shadow-md overflow-hidden flex flex-col">
            <a href={`/course/${item.slug}`}>
              <img src={item.imagen} alt={item.titulo} class="w-full h-40 object-cover"/>
            </a>
            <div class="flex flex-col flex-grow">
              <header class="p-4">
                <a class="hover:text-blue-600" href={`/course/${item.slug}`}>
                  <h2 class="text-lg font-bold text-gray-800">{item.titulo}</h2>
                </a>
                <p class="text-sm text-gray-600 mt-2">{item.descripcion_resumida}</p>
              </header>
              <footer class="mt-auto p-4 border-t border-gray-200">
                <div class="flex justify-between items-center mb-4">
                  <div class="flex items-center space-x-2">
                    <img src="https://picsum.photos/32/32" alt="Instructor" class="w-8 h-8 rounded-full"/>
                    <p class="text-sm text-gray-600">{item.instructor}</p>
                  </div>
                  <Like courseId={item.id} initialLikes={item.likes} onLikeUpdate={() => {}} client:load/>
                </div>
                <div data-userid="">
                  <PurchasedCourseActions course={item} client:load />
                </div>
              </footer>
            </div>
          </article>
        </div>
      ))}
    </div>
  </div>

  <script>
    const checkAuth = () => {
      const token = localStorage.getItem("token");
      const userId = localStorage.getItem("userId");
      
      if (!token || !userId) {
        window.location.href = "/login";
        return null;
      }
      return userId;
    };

    const checkPurchasedCourses = async () => {
      const userId = checkAuth();
      if (!userId) return;

      try {
        const response = await fetch(
          `https://firestore.googleapis.com/v1/projects/practica9-32729/databases/(default)/documents/purchases/${userId}/courses`
        );
        const data = await response.json();
        
        if (!data.documents) {
          document.querySelectorAll('.course-card').forEach(card => card.remove());
          return;
        }

        const purchasedIds = data.documents.map((doc: { name: string }) => doc.name.split('/').pop());
        
        document.querySelectorAll('.course-card').forEach(card => {
          const courseId = card.getAttribute('data-course-id');
          if (purchasedIds.includes(courseId)) {
            card.classList.remove('opacity-0');
            card.classList.add('opacity-100');
          } else {
            card.remove();
          }
        });
      } catch (error) {
        console.error("Error verificando cursos comprados:", error);
      }
    };

    // Verificar autenticación y cursos comprados cada segundo
    const interval = setInterval(() => {
      const userId = checkAuth();
      if (userId) {
        checkPurchasedCourses();
      }
    }, 1000);

    // Limpiar el intervalo después de 5 segundos
    setTimeout(() => clearInterval(interval), 5000);

    // Verificación inicial
    checkPurchasedCourses();
  </script>
</Layout> 